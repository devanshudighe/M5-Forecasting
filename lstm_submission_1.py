# -*- coding: utf-8 -*-
"""LSTM_Submission-1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10eQTvacJDR-61U5i17i-T37jH9XnqIrY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from tensorflow.python.keras.layers import Dense,Dropout
from tensorflow.python.keras import Sequential
from tensorflow.keras.layers import LSTM
import datetime
from numpy import concatenate
from pandas import concat
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error

CAL_DTYPES={"event_name_1": "category", "event_name_2": "category", "event_type_1": "category", 
         "event_type_2": "category", "weekday": "category", 'wm_yr_wk': 'int16', "wday": "int16",
        "month": "int16", "year": "int16", "snap_CA": "float32", 'snap_TX': 'float32', 'snap_WI': 'float32' }

#here we read the calender file
cal=pd.read_csv("/content/drive/My Drive/ML_257 Project/calendar.csv", header=0, dtype = CAL_DTYPES)
#cal=pd.read_csv("/home/014608347/m5_forecasting_g1/dataset/calendar.csv", header=0, dtype = CAL_DTYPES)
cal1 = cal
cal.head()

#we change the columns with dtype category 'string' to 'int16', so that the data can be fed to the model  
cal1["date"] = pd.to_datetime(cal1["date"])
for col, col_dtype in CAL_DTYPES.items():
  if col_dtype == "category":
    cal1[col] = cal1[col].cat.codes.astype("int16")
    cal1[col] -= cal1[col].min()

cal1.head()

is_train = True
nrows = None
first_day = 1
h = 28 
max_lags = 57
tr_last = 1913
fday = datetime.datetime(2011,1, 29) 
fday

#We load sales train validation into dataframe
start_day = max(1 if is_train  else tr_last-max_lags, first_day)
numcols = [f"d_{day}" for day in range(start_day,tr_last+1)] #give days to columns
catcols = ['id', 'item_id', 'dept_id','store_id', 'cat_id', 'state_id'] # columsn without days
dtype = {numcol:"float32" for numcol in numcols} #assigning float values to columns
dtype.update({col: "category" for col in catcols if col != "id"})
dt = pd.read_csv("/content/drive/My Drive/ML_257 Project/sales_train_validation.csv", 
                  nrows = nrows, usecols = catcols + numcols, dtype = dtype)

dt.head()

dt = dt.drop(columns=["item_id","dept_id","cat_id","store_id","state_id"]) #dropping columns without days
dt.head()

dt = dt.T #taking transpose of dt to merge with calender and for loading into the model
dt = dt.rename(columns=dt.iloc[0])
dt.head()

dt = dt.drop(labels="id", axis=0) #dropping id row from dataset
dt.head()

#removing the columns that need not be merged
cal1 = cal1.iloc[:,6:]
cal1.head()

#setting index to days
cal1 = cal1.set_index('d')
cal1.head()

#merging salestrainvalidation and calender
result = pd.concat([dt, cal1], axis=1)
result.head()

result = result.iloc[:1913,:]
result.tail()

result.shape

#As the data is unsupervised data we convert it into supervised data
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	n_vars = 1 if type(data) is list else data.shape[1]
	df = pd.DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	agg=agg.fillna(0)
	return agg

reframed = series_to_supervised(result, 1, 1)
reframed.shape

#we remove the predicted features and as we dont need them we are only
#predicting the product sales
reframed = reframed.iloc[:,:60987]

reframed.head()

#360 Days data.
one_yr_data=reframed.iloc[1553:1913,:]

#to get one product from the set of all products
def form_inputs(data, i):
  #loop for all the products
  orig = 'var'+str(i)+'(t-1)'
  pred = 'var'+str(i)+'(t)'
  one_prod = data[[orig,'var30491(t-1)','var30492(t-1)','var30493(t-1)','var30494(t-1)','var30495(t-1)','var30496(t-1)','var30497(t-1)',pred]].copy()
  values=one_prod.values
  return values

#Here we take a batch of 30 days and then y_test is the 30th day
def split_sequences(sequences, n_steps):
	X, y = list(), list()
	for i in range(len(sequences)):
		# find the end of this pattern
		end_ix = i + n_steps
		# check if we are beyond the dataset
		if end_ix > len(sequences):
			break
		# gather input and output parts of the pattern
		seq_x, seq_y = sequences[i:end_ix, :-1], sequences[end_ix-1, -1]
		X.append(seq_x)
		y.append(seq_y)
	return np.array(X), np.array(y)

#This is the LSTM model it contains 30 neurons and we have used sigmoid activation function
#Also we use mse and adam optimiser to get the loss 
def LSTM_model(n_steps, n_features, X, y):
  model = Sequential()
  model.add(LSTM(30, activation='sigmoid', input_shape=(n_steps, n_features)))
  model.add(Dropout(0.3))
  model.add(Dense(30))
  model.compile(optimizer='adam', loss='mse')
  model.fit(X, y, epochs=50, verbose=0)
  return model

#This method is used to select each product from 30490 products for 1 year, 
#get the model for that product and predict the next 30 days sales
def test():
  lstm_pred = pd.DataFrame()
  for i in range(3500,6500):
    inp_values = form_inputs(one_yr_data, i+1)
    n_steps = 30
    # convert into input/output
    X, y = split_sequences(inp_values, n_steps)
    # the dataset knows the number of features, e.g. 2
    n_features = X.shape[2]
    X=X.astype(float)
    y=y.astype(float)
    model = LSTM_model(n_steps, n_features, X, y)
    X_test=inp_values[330:360,:-1].astype(float)
    X_test=X_test.reshape(1,30,8)
    yhat = model.predict(X_test, verbose=0)
    lstm_pred[result.columns[i]] = yhat.flatten()
  return lstm_pred

lstm_pred = test()
#lstm_pred.head()

#here we save the submission to the csv file
lstm_pred.to_csv("/content/drive/My Drive/ML_257 Project/devanshu_submission_1.csv",index=False)